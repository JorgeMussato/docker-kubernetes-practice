Comandos para rodar:

Build da imagem:
docker build .

Criar objeto do deployment no cluster:
kubectl create deployment <name> --image=<image-name> (imagem precisa estar no dockerhub)

Precisa passar a imagem para dentro do cluster, ou passar a imagem que é parte de um registro de imagem.

Para criar um serviço para expor o deployment (importante para agrupar pods, expor os pods internamente e externamente):

kubectl expose deployment <deployment-name> --port=<port> --type=<type> (type = LoadBalancer, ClusterIP, etc)

Usar o Scaling na prática.

kubectl scale deployment/<name> --replicas=<number>

Pode-se escalar de volta, apenas trocando o número de réplicas para menos.

Para atualizar o deployment:
kubectl set image deployment/first-app <image-name-inside-pod>=<docker-hub-image-name>:<version>
É preciso trocar as tags para que o kubernetes baixe automaticamente e atualize o pod. Quando falha ao dar pull em imagem (version que não existe), ele não dropa o pod antigo

Para verificar o status:
kubectl rollout status deployment/<deployment-name>

Para dar rollback:
kubectl rollout undo deployment/<deployment-name>
kubectl rollout undo deployment/<deployment-name> --to-revision=<revision>

Para ver histórico de deployments.
kubectl rollout history deployment/<deployment-name>
kubectl rollout history deployment/<deployment-name> --revision=<revision>


Para deletar:
kubectl delete service <name>
kubectl delete deployment <name>

Para deletar por label:
kubectl delete deployments,services -l <label-key>=<label-value>


PS: kubectl get deployments - listar deployments
PS: kubectl get pods - listar pods
PS: kubectl get services - listar services



//////////////////////////////////

Para aplicar a configuração:
kubectl apply -f=<config-name>.yaml

Para trocar, troque o arquivo e dê apply de novo.

Para deletar pode-se utilizar
kubectl delete -f=<config-name>.yaml,<config-name>.yaml

O service sempre observa as mudanças de acordo com os pods que tem a especificação que ele observa, no selector.
